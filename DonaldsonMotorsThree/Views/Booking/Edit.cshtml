@using System.Web.Mvc.Html
@model DonaldsonMotorsThree.ViewModels.BookingFormViewModel

@{
    ViewBag.Title = "Update booking details";
}

<h2>Edit</h2>


@using (Html.BeginForm(
    controllerName: "Booking", actionName: "UpdateBooking"))
{
    @Html.AntiForgeryToken()

    <br />
    <h4 style="text-align: center"><b><em>Booked Jobs</em></b></h4>
    <hr />

    @Html.HiddenFor(m => m.BookedBooking.JobIds)
    @Html.HiddenFor(m => m.BookedBooking.BookingId)
    @Html.HiddenFor(m => m.BookedBooking.Vehicle.VehicleId)
    @Html.HiddenFor(m => m.BookedBooking.Vehicle.CustomerId)
    @Html.HiddenFor(m => m.BookedBooking.CustomerId)
    @Html.HiddenFor(m => m.BookedBooking.BookingStatus)

    <div class="form-horizontal">
        <div class="form-group row hidden">
            <label class="control-label col-md-2">Booked Jobs</label>
            <div class="col-md-9">
                @Html.EditorForJob(model => model.BookedBooking.Jobs)
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.BookedBooking.Jobs, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-9">
                @Html.DisplayFor(model => model.BookedBooking.Jobs, templateName: "JobsTemplate")
            </div>
        </div>
        <hr />


        <div class="form-group row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.BookedBooking.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
            </div>
            <div class="col-md-9">
                @Html.EditorFor(model => model.BookedBooking.StartDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BookedBooking.StartDate, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.BookedBooking.Vehicle.RegNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            </div>
            <div class="col-md-9">
                @Html.EditorFor(model => model.BookedBooking.Vehicle.RegNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BookedBooking.Vehicle.RegNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.BookedBooking.Vehicle.Make, htmlAttributes: new { @class = "control-label col-md-2" })
            </div>
            <div class="col-md-9">
                @Html.EditorFor(model => model.BookedBooking.Vehicle.Make, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BookedBooking.Vehicle.Make, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.BookedBooking.Vehicle.Model, htmlAttributes: new { @class = "control-label col-md-2" })
            </div>
            <div class="col-md-9">
                @Html.EditorFor(model => model.BookedBooking.Vehicle.Model, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BookedBooking.Vehicle.Model, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.BookedBooking.Vehicle.EngineSize, htmlAttributes: new { @class = "control-label col-md-2" })
            </div>
            <div class="col-md-9">
                @Html.EditorFor(model => model.BookedBooking.Vehicle.EngineSize, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BookedBooking.Vehicle.EngineSize, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.BookedBooking.Vehicle.Milage, htmlAttributes: new { @class = "control-label col-md-2" })
            </div>
            <div class="col-md-9">
                @Html.EditorFor(model => model.BookedBooking.Vehicle.Milage, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BookedBooking.Vehicle.Milage, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-offset-2 col-md-4">
                @Html.Partial("_BackToListButtonPartial")
            </div>
            <div class="col-md-4">
                <a type="button" class="btn btn-success btn-sm" href="#" onclick="$(this).closest('form').submit()">
                    Update booking
                    <span class="glyphicon glyphicon-save"></span>
                </a>
            </div>
        </div>

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    </div>

}

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        var vm = {
            jobIds: [],
            carPartIds: []
        };

        $(document).ready(function () {


            var dateInputsWithValue = $('input[type="date"][value!=""]');

            dateInputsWithValue.each(function (idx, elem) {
                var inputFld = $(elem).get();
                inputFld[0].type = "text";
                inputFld[0].value = inputFld[0].defaultValue;
            });


            //Set up "Bloodhound" Options
            var my_Suggestion_class = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('jobRequirements'),
                queryTokenizer: function (item) {
                    //console.log("query",item);
                    return Bloodhound.tokenizers.whitespace(item);
                },
                remote: {
                    url: '/api/jobs?query=%QUERY',
                    wildcard: '%QUERY'
                    //,filter: function (x) {
                    //    return $.map(x, function (item) {
                    //        console.log(item);
                    //        return { jobRequirements: item.jobRequirements};
                    //    });
                    //}
                },
                limit: 15
            });

            // Initialize Typeahead with Parameters
            my_Suggestion_class.initialize();
            var typeahead_elem = $('#jobinput');
            typeahead_elem.typeahead({
                hint: true,
                highlight: true,
                minLength: 0
            },
                {
                    // `ttAdapter` wraps the suggestion engine in an adapter that
                    // is compatible with the typeahead jQuery plugin
                    name: 'jobRequirements',
                    displayKey: 'jobRequirements',
                    source: my_Suggestion_class.ttAdapter()
                });

            $('.typeahead').on("typeahead:select",
                function (e, job) {
                    console.log(job);
                    //When a Job item has been selected, append selected job onto list //
                    $("#selectedjobslist").append("<li class='list-group-item' value='" + job.id + "'>" + job.jobRequirements + "</li>");
                    setTimeout(function () { $("#jobinput").val(''); }, 500);
                    vm.jobIds.push(job.id);
                    // bug? No way to remove job ids yet
                    $("#BookedBooking_JobIds").val(vm.jobIds.toString());
                });
        });// Close document ready
    </script>
}

